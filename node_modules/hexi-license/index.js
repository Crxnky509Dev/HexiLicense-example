const fetch = require('node-fetch');

class HexiLicense {
  /**
   * @param {Object} options
   * @param {string} options.apiKey - Your API key for HexiLicense
   * @param {string} [options.baseUrl] - Optional, defaults to official HexiLicense API URL
   */
  constructor({ apiKey, baseUrl = 'https://dashboard.hexilicense.xyz/api' }) {
    if (!apiKey) throw new Error('API key is required');
    this.apiKey = apiKey;
    this.baseUrl = baseUrl;
  }

  async _request(endpoint, method = 'GET', data) {
    const url = `${this.baseUrl}${endpoint}`;

    const headers = {
      'Authorization': `Bearer ${this.apiKey}`,
      'Content-Type': 'application/json',
    };

    const options = {
      method,
      headers,
    };

    if (data) {
      options.body = JSON.stringify(data);
    }

    const res = await fetch(url, options);

    if (!res.ok) {
      const errorData = await res.json().catch(() => ({}));
      throw new Error(errorData.message || `HTTP error ${res.status}`);
    }

    return res.json();
  }

  // Example: Generate a license
  async generateLicense(payload) {
    // payload should contain required fields, e.g. productId, userId, duration, etc.
    return this._request('/licenses/generate', 'POST', payload);
  }

  // Example: Check a license key
  async checkLicense(licenseKey) {
    return this._request(`/licenses/check/${licenseKey}`, 'GET');
  }

  // Example: Revoke a license key
  async revokeLicense(licenseKey) {
    return this._request(`/licenses/revoke/${licenseKey}`, 'POST');
  }

  // Example: List licenses (optionally filtered)
  async listLicenses(params = {}) {
    // Construct query string from params object
    const queryString = new URLSearchParams(params).toString();
    return this._request(`/licenses/list?${queryString}`, 'GET');
  }

  // Example: Get info about a license
  async getLicenseInfo(licenseKey) {
    return this._request(`/licenses/info/${licenseKey}`, 'GET');
  }
}

module.exports = HexiLicense;
